
user  root;
worker_processes  auto;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
error_log  "pipe:rollback logs/error.log interval=1d baknum=7 maxsize=2G";

pid        logs/nginx.pid;

worker_rlimit_nofile 65535;

events {
    worker_connections  65535;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    log_format  log_default '[$time_iso8601] [$msec] [$scheme] [$server_protocol] '
                        '[$host] [$uri] [$query_string] [$request_method] '
                        '[$status] [$request_time] [$request_length] [$bytes_sent] '
                        '[$upstream_status] [$upstream_addr] [$upstream_response_time] [$upstream_response_length] '
                        '[$remote_addr] [$proxy_add_x_forwarded_for] [$http_x_real_ip] '
                        '[$http_referer] [$http_user_agent]';
			#'[$request_body] [$arg_info] [$cookie_info] [$http_info] '
                        #'[$upstream_cookie_info] [$upstream_http_info]';

    #access_log  logs/access.log  main;
    access_log  "pipe:rollback logs/access.log interval=1d baknum=7 maxsize=2G"  log_default;

    sendfile        on;
    tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    gzip  on;

	proxy_buffering on;            #启用或禁用来自代理服务器的响应缓冲。启用以下参数才有意义
	proxy_buffers 4 128k;          #设置用于从代理服务器读取响应的缓冲区的数量和大小，用于单个连接
	proxy_buffer_size 128k;        #设置用于读取从代理服务器接收的响应的第一部分的缓冲区的大小。这部分通常包含一个小的响应头。
	#可以理解为主要用于缓存header头，其大小要大于响应header头
	proxy_busy_buffers_size 256k;  #可以理解为：设定往客户端回传数据的缓存区总大小，一般是两个缓存区大小，其他缓存区用于从后端服务获取数据。
	proxy_max_temp_file_size 1024m;  #不适合放在缓存区的响应数据，写入临时文件中，这里是文件大小设定
	proxy_temp_file_write_size 256k; #一次写入缓存文件的数据大小，一般为两个缓存区大小

	proxy_connect_timeout 10s;       #设置与后端服务器建立连接的超时时间
	proxy_read_timeout 10s;          #设置从后端服务器读取响应的超时时间，只是两次连续的读操作之间的超时设定，不是整个响应的传输设定
	proxy_send_timeout 10s;          #设置将请求传输到后端服务器的超时时间，只是两次连续写入操作之间的超时设定，而不是为整个请求的传输。

	proxy_next_upstream error timeout invalid_header http_502 http_503 http_504;  #指定应将请求传递到下一个服务器的情况
	#proxy_next_upstream_timeout 3s; #限制请求可以传递到下一个服务器的时间  v1.7.5 以上版本
	#proxy_next_upstream_tries 2;    #限制将请求传递到下一个服务器的可能尝试次数。 v1.7.5 以上版本
												      
	client_max_body_size 100m;      #设置客户端请求正文的最大允许大小，超出返回http状态码413，将大小设置为0将禁用检查客户端请求正文大小
	client_body_buffer_size 128k;   #设置读取客户端请求主体的缓冲区大小。如果请求主体大于缓冲区，则整个主体或仅其部分被写入临时文件。
															 
	#proxy_store off;                #将文件保存到磁盘
	#proxy_redirect default;         #设置应在代理服务器响应的响应头中的“Location”和“refresh”字段更改的文本

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
        #access_log  "pipe:rollback logs/host.access_log interval=1d baknum=7 maxsize=2G"  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # pass the Dubbo rpc to Dubbo provider server listening on 127.0.0.1:20880
        #
        #location /dubbo {
        #    dubbo_pass_all_headers on;
        #    dubbo_pass_set args $args;
        #    dubbo_pass_set uri $uri;
        #    dubbo_pass_set method $request_method;
        #
        #    dubbo_pass org.apache.dubbo.samples.tengine.DemoService 0.0.0 tengineDubbo dubbo_backend;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }
    include /usr/local/nginx/conf/current.conf;
    # upstream for Dubbo rpc to Dubbo provider server listening on 127.0.0.1:20880
    #
    #upstream dubbo_backend {
    #    multi 1;
    #    server 127.0.0.1:20880;
    #}

    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
